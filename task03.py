# Задача FOOTBALL: (необязательное) Напишите программу, которая принимает на стандартный вход
# список игр футбольных команд с результатом матча и выводит на стандартный вывод сводную
# таблицу результатов всех матчей.
# За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
#
# Формат ввода следующий:
# В первой строке указано целое число nn — количество завершенных игр.
# После этого идет nn строк, в которых записаны результаты игры в следующем формате:
# Перваякоманда;Забитопервойкомандой;Втораякоманда;Забитовторойкомандой
# Вывод программы необходимо оформить следующим образом:
# Команда:Всегоигр Побед Ничьих Поражений Всегоочков
#
# Конкретный пример ввода-вывода приведён ниже.
# Порядок вывода команд произвольный.
# Sample Input:
# 3
# Спартак;9;Зенит;10
# Локомотив;12;Зенит;3
# Спартак;8;Локомотив;15
# Sample Output:
# Спартак:2 0 0 2 0
# Зенит:2 1 0 1 3
# Локомотив:2 2 0 0 6

def my_input_games() -> list:
    # Ввод результатов матчей
    # НЕ РЕАЛИЗОВАНА ПРОВЕРКА НА НЕПРАВИЛЬНЫЙ ВВОД !!!!!!!!!!!
    matches = int(input("Введите количество сыгранных игр: "))
    print("Вводите результаты игр в формате:")
    print("<Команда 1>;<Забито голов командой 1>;<Команда 2>;<Забито голов командой 2>")
    print("Разделители \";\" - обязательны!")
    return [input(f'Введите результат {i+1} игры: ') for i in range(matches)]

def my_get_chempionship(local_list: list) -> dict: # Построение словаря чемпионата
    dict1 = {}
    def add_team_result(team:str,win:int): # добавление в словарь результатов игры одной команды
                                           # win == -1 - проигрыш
                                           # win == 0 - ничья
                                           # win == 1 - выйгрыш
        nonlocal dict1 # используем переменную из родительской функции
        if dict1.get(team, False): # проверка существования ключа
            # ключ есть
            dict1[team][0] += 1                     # игры
            dict1[team][1] += 1 if win > 0 else 0   # победы
            dict1[team][2] += 1 if win == 0 else 0  # ничьи
            dict1[team][3] += 1 if win < 0 else 0   # проигрыши
            if win > 0: dict1[team][4] += 3         # очки за победу
            elif win == 0: dict1[team][4] += 1      # очки за ничью
        else:
            # ключа нет - команда первый раз попала в словарь
            dict1[team] = [0,0,0,0,0]               # все пустое ей присваиваем
            dict1[team][0] = 1                      # игры
            dict1[team][1] = 1 if win > 0 else 0    # победы
            dict1[team][2] = 1 if win == 0 else 0   # ничьи
            dict1[team][3] = 1 if win < 0 else 0    # проигрыши
            if win > 0: dict1[team][4] = 3          # очки за победу
            elif win == 0: dict1[team][4] = 1       # очки за ничью

    for i in local_list:
        my_items=i.split(';')                       # разделяем введенную строку
        my_items[1] = int(my_items[1])              # количество голов первой команды - в int
        my_items[3] = int(my_items[3])              # количество голов второй команды - в int
        if my_items[1] == my_items[3]:              # ничья
            add_team_result(my_items[0], 0)
            add_team_result(my_items[2], 0)
        elif my_items[1] < my_items[3]:             # первая - прогирала, вторая - выйграла
            add_team_result(my_items[0], -1)
            add_team_result(my_items[2], 1)
        else:                                       # первая - выйграла, вторая - прогирала
            add_team_result(my_items[0], 1)
            add_team_result(my_items[2], -1)
    return dict1

def my_print_game_table(local_dict: dict):  # красиво печатаем таблицу
    def print_separator(width:int):
        print('+'+'-' * width + '+' +'-----+' * 5)
    col1width = max([len(_) for _ in local_dict.keys()]) # вычисляем длину самого длинного названия команды
    if col1width < len('Команда'): col1width = len('Команда')  # если названия команд - короткие
    print_separator(col1width)
    print(f'|{"Команда".center(col1width)}|'    # шапка таблицы
          f'{"Игры".center(5)}|'
          f'{"Побед".center(5)}|'
          f'{"Ничья".center(5)}|'
          f'{"Пораж".center(5)}|'
          f'{"Очки".center(5)}|'
          )
    print_separator(col1width)
    for (team,res) in local_dict.items():   # тело таблицы
        print(f'|{team.ljust(col1width)}|'
              f'{str(res[0]).center(5)}|'
              f'{str(res[1]).center(5)}|'
              f'{str(res[2]).center(5)}|'
              f'{str(res[3]).center(5)}|'
              f'{str(res[4]).center(5)}|'
              )
    print_separator(col1width)

############ сама программа ###############
#matches = 3 # оказалось - не нужно
# lines = ['Спартак;9;Зенит;10',
#          'Локомотив;12;Зенит;3',
#          'Спартак;8;Локомотив;15']
# lines = ['Спартак;2;Динамо;0',
#          'Торпедо;0;Локомотив;5',
#          'Динамо;0;Торпедо;0',
#          'Локомотив;4;Спартак;3']
lines = my_input_games() # ввод
print("Таблица результатов матчей:")
my_print_game_table(my_get_chempionship(lines)) # вывод


##########################################################
################## Вывод результата ######################
##########################################################
# Введите количество сыгранных игр: 5
# Вводите результаты игр в формате:
# <Команда 1>;<Забито голов командой 1>;<Команда 2>;<Забито голов командой 2>
# Разделители ";" - обязательны!
# Введите результат 1 игры: Трактор;3;Динамо;0
# Введите результат 2 игры: Торпедо;1;Металлург;1
# Введите результат 3 игры: Спартак;1;Металлург;0
# Введите результат 4 игры: Динамо;4;Торпедо;2
# Введите результат 5 игры: Динамо;2;Трактор;2
# Таблица результатов матчей:
# +---------+-----+-----+-----+-----+-----+
# | Команда | Игры|Побед|Ничья|Пораж| Очки|
# +---------+-----+-----+-----+-----+-----+
# |Трактор  |  2  |  1  |  1  |  0  |  4  |
# |Динамо   |  3  |  1  |  1  |  1  |  4  |
# |Торпедо  |  2  |  0  |  1  |  1  |  1  |
# |Металлург|  2  |  0  |  1  |  1  |  1  |
# |Спартак  |  1  |  1  |  0  |  0  |  3  |
# +---------+-----+-----+-----+-----+-----+
